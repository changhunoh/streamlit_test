# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K4ZLdGiH5Lq_X3zZFoAqV5tusmuk8pcX
"""

# app.py
import streamlit as st
st.set_page_config(page_title="주식 추천 에이전트", layout="centered")
import pandas as pd
import sys
import os

# --- LangGraph 백엔드 모듈 임포트 ---
# app.py와 langgraph_backend.py가 같은 폴더에 있다고 가정합니다.
# 만약 다른 폴더에 있다면 sys.path.append() 경로를 수정해야 합니다.
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

try:
    # langgraph_backend.py 파일에서 필요한 것들을 임포트합니다.
    from langgraph_backend import graph, StockRecommendationState, nasdaq_stocks_df
    st.success("LangGraph 백엔드 모듈 임포트 성공!")
except ImportError as e:
    st.error(f"LangGraph 백엔드 모듈 임포트 실패: {e}")
    st.info("`langgraph_backend.py` 파일이 `app.py`와 같은 폴더에 있는지 확인하거나, `sys.path.append()` 경로를 수정하세요.")
    st.stop() # 임포트 실패 시 앱 실행 중지
except Exception as e:
    st.error(f"LangGraph 백엔드 모듈 로드 중 알 수 없는 오류 발생: {e}")
    st.stop()

# --- Streamlit Secrets에서 API 키 설정 (Colab userdata 대체) ---
# Streamlit 앱을 배포하거나 로컬에서 안전하게 API 키를 사용하려면 이 방법을 권장합니다.
# 1. 프로젝트 루트에 .streamlit/secrets.toml 파일을 생성합니다.
# 2. secrets.toml 파일에 다음과 같이 API 키를 추가합니다:
#    GOOGLE_API_KEY = "YOUR_GOOGLE_API_KEY"
#    SERPAPI_API_KEY = "YOUR_SERPAPI_API_KEY"
# 3. 코드에서 os.environ.get() 대신 st.secrets[]를 사용하도록 langgraph_backend.py를 수정해야 합니다.
#    (현재 langgraph_backend.py는 os.environ.get()을 사용하므로, 환경 변수를 설정해야 합니다.)
#    예: export GOOGLE_API_KEY="your_key"
#        export SERPAPI_API_KEY="your_key"
#    또는, Streamlit Secrets를 사용하려면 langgraph_backend.py의 API 키 로드 부분을
#    st.secrets.get()으로 변경해야 합니다. 여기서는 os.environ.get()을 유지합니다.

st.title("📈 AI 주식 추천 에이전트")
st.markdown("궁금한 주식 관련 질문을 입력하시면 AI가 종목을 추천해 드립니다.")

# 사용자 입력 받기
user_query = st.text_input(
    "어떤 종류의 주식에 투자하고 싶으신가요? (예: '기술주에 투자하고 싶어', '시가총액이 큰 에너지 주식 추천해 줘')",
    placeholder="예: '친환경 에너지 관련 주식 추천해 줘' 또는 '삼성전자에 대해 알려줘'"
)

# 추천 버튼
if st.button("주식 추천받기"):
    if not user_query:
        st.warning("질문을 입력해주세요!")
    else:
        with st.spinner("AI가 주식 정보를 분석하고 추천을 생성 중입니다... 잠시만 기다려 주세요 (최대 1-2분 소요)."):
            try:
                # LangGraph 초기 상태 설정
                # nasdaq_stocks_df는 langgraph_backend.py에서 이미 로드된 전역 변수입니다.
                init_state = StockRecommendationState(
                    messages=[],
                    query=user_query,
                    recommendations=[],
                    feedback="",
                    iteration_count=0,
                    formatted_output="",
                    news={},
                    judge_score=0.0,
                    judge_reason="",
                    all_available_stocks_df=nasdaq_stocks_df,
                    filtered_nasdaq_stocks_df=pd.DataFrame() # 초기에는 빈 DataFrame
                )

                # LangGraph 에이전트 실행
                final_state = graph.invoke(init_state)

                # 결과 표시
                st.subheader("🌟 AI의 주식 추천 결과")
                if "formatted_output" in final_state and final_state["formatted_output"]:
                    st.markdown(final_state["formatted_output"])
                elif "recommendations" in final_state and final_state["recommendations"]:
                    st.json(final_state["recommendations"]) # raw JSON fallback
                else:
                    st.warning("추천을 생성하지 못했습니다. 질문을 다시 시도해주세요.")

                st.markdown("---")
                st.subheader("🔍 에이전트 실행 상세")
                st.write(f"**총 반복 횟수:** {final_state.get('iteration_count', 0)}")
                st.write(f"**LLM Judge 최종 점수:** {final_state.get('judge_score', 0.0):.2f}")
                st.write(f"**LLM Judge 최종 이유:** {final_state.get('judge_reason', '없음')}")

            except Exception as e:
                st.error(f"주식 추천 에이전트 실행 중 오류 발생: {e}")
                st.exception(e) # 자세한 스택 트레이스 표시

st.sidebar.header("정보")
st.sidebar.info(
    "이 앱은 LangGraph를 기반으로 한 AI 주식 추천 에이전트 데모입니다.\n\n"
    "Yahoo Finance, FinanceDataReader, SerpApi를 사용하여 실시간 데이터를 활용합니다."
)
st.sidebar.markdown("[GitHub 리포지토리](https://github.com/your-repo-link) (만약 있다면)")
